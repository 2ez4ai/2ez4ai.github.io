I"Y<div align="center"><img src="../../../../assets/images/astroxygen_bg.png" alt="" width="700" />
</div>
<center>
  <p style="font-size:80%;">
Figure 1. Astroxygen.
  </p>
</center>

<div align="center">
<video width="700" controls="controls">
	<source src="../../../../assets/videos/astroxygen_recording.mp4" type="video/mp4" />
</video>
</div>
<center>
  <p style="font-size:80%;">
Video 1. Demo video.
  </p>
</center>

<h1 id="0-background">0. Background</h1>

<p>This blog finally has something related to video games. <a href="https://github.com/2ez4ai/Astroxygen">Astroxygen</a> is my first Unity3D project after attending like three courses of Unity3D. This game is generally based on the <em>perfect match</em> map of <strong>Fall Guys: Ultimate Knockout</strong>, as I find the models of that are friendly given my poor modeling skills. Also, it innately allows me to personalize, to some extent, my game by using a different figure set rather than fruits. To complete the game flow, unlike <em>perfect match</em> that has fixed rounds, I set the goal for the player as collecting enough oxygen cylinder.</p>

<div align="center"><img src="../../../../assets/images/fallguys_pm.png" alt="" width="450" />
</div>

<center>
  <p style="font-size:80%;">
Figure 2. The perfect match map of FullGuys.
  </p>
</center>

<h1 id="1-components">1. Components</h1>

<p>The scene includes two main components:</p>
<ul>
  <li>a screen to display the target figure and other information;</li>
  <li>a platform consisted of 16 tiles allowing players to stand on.</li>
</ul>

<p>To make the falling reasonable, I use a picture of space as the background. For the choice of CSGO items, that was my very original idea since they are fascinating and highly distinguishable.</p>

<h1 id="2-mechanism">2. Mechanism</h1>

<p>Actually, it occurred to me quite late that listing a time table for all scripts can relieve me a lot when doing such a turn-based game (at the start of the project, I dived into each logic independently, and very often got stuck with their inconsistent logic). In each round, the game proceeds as follows:</p>
<ul>
  <li>-1.5s ~ 0.0s, ready for start;</li>
  <li>0.0s ~ 5.0s, reveal some tiles randomly for memorisation;</li>
  <li>5.0s ~ 10.0s, reveal some tiles randomly for memorisation; start counting down;</li>
  <li>10.s ~ 15.0s, cover all tiles; generate oxygen tanks randomly;</li>
  <li>15.0s ~ 17.5s, disable moving ability of all players; reveal all tiles to show the answer;</li>
  <li>17.5s ~ 20.0s, disable tiles that have wrong figures;</li>
  <li>20.0s ~ , reset timer, tiles state, player’s moving ability;</li>
</ul>

<p>Now I would like to summarize the detailed mechanism of each object.</p>

<p><strong>FallGuys</strong>: it is controlled by player via <code class="language-plaintext highlighter-rouge">CharacterController</code>. To avoid jumping over others’ head, which would stack fallguys,  I add an invisiable high cylinder for each of them.</p>

<p><strong>Computers</strong>: to make it of great diversity, I created some materials for skins and outfits from which it choices randomly at the start of the game, and its action and memory are actually done by a lot of <code class="language-plaintext highlighter-rouge">Random.RandomRange()</code>. It does work. I mean, they look like smart and fun enough XD. The move is done by <code class="language-plaintext highlighter-rouge">move()</code> of <code class="language-plaintext highlighter-rouge">CharacterController</code>, where I set the horizontal/vertical input manually according to their position. I intended to implement the move by <code class="language-plaintext highlighter-rouge">NavMeshAgent</code>, but failed to make it due to the platform I implemented is not static.</p>

<div align="center"><img src="../../../../assets/images/astroxygen_computers.png" alt="" width="1000" />
</div>

<center>
  <p style="font-size:80%;">
Figure 3. The computers can arrive right tiles, as well as the wrong ones (the green computer standing on the tile with a glove figure, which is different from the one in the screen).
  </p>
</center>
<p><strong>Oxygen</strong>: they are created randomly in the 10th seconds of each round. The main logic is done by in <code class="language-plaintext highlighter-rouge">OnTriggerEnter()</code>. I also add floating effect for them by changing the <code class="language-plaintext highlighter-rouge">transform.position.y</code>, which is also applied to the green indicator sign.</p>

<div align="center"><img src="../../../../assets/images/astroxygen_oxygen.png" alt="" width="1000" />
</div>

<center>
  <p style="font-size:80%;">
Figure 4. The player is trying to get access to the oxygen cylinder. The screen shows that it still needs to collect 4 more oxygen cylinders.
  </p>
</center>
<p><strong>Platform</strong>: the removing of tiles makes the platform can not be static. The reveal and covering are all done by changing the corresponding material. It is quite easy.</p>

<p><strong>Screen</strong>: like platform, its function mostly is done by changing materials.</p>

<p><strong>SphereBlock</strong>: though they look gigantic, they are generally harmless, as they are floating quite high above players. The only reason I added this is that this project asks us to use <code class="language-plaintext highlighter-rouge">NavMeshAgent</code>. And yes, this is done with <code class="language-plaintext highlighter-rouge">NavMeshAgent</code>.</p>

<h1 id="3-conclusion">3. Conclusion</h1>

<p>This project reminds me of the days when I enjoyed the scenario editors of <em>Age of Empires II</em> and <em>Warcraft 3</em>. But at that time I was like 15 years old, and actually did not make a thing. As for my first project and given such a short time, I think this project is of a high degree of completeness. The main drawback, for me, is the code construction is messy due to my lacking in the game logic in the early stage.</p>
:ET